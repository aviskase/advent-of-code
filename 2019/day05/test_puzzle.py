import pytest

from day05.puzzle import execute_program, unpack_code


@pytest.mark.parametrize('program,result', [
    ([1, 0, 0, 0, 99], [2, 0, 0, 0, 99]),
    ([2, 3, 0, 3, 99], [2, 3, 0, 6, 99]),
    ([2, 4, 4, 5, 99, 0], [2, 4, 4, 5, 99, 9801]),
    ([1, 1, 1, 4, 99, 5, 6, 0, 99], [30, 1, 1, 4, 2, 5, 6, 0, 99]),
    ([3, 0, 4, 0, 99], [1, 0, 4, 0, 99]),
    ([1002, 4, 3, 4, 33], [1002, 4, 3, 4, 99]),
    ([1101, 100, -1, 4, 0], [1101, 100, -1, 4, 99]),
])
def test_execute_program(program, result):
    actual, _ = execute_program(program, 1)
    assert actual == result


@pytest.mark.parametrize('program,input,output', [
    ([3,9,8,9,10,9,4,9,99,-1,8], 7, 0),
    ([3,9,8,9,10,9,4,9,99,-1,8], 8, 1),
    ([3,9,8,9,10,9,4,9,99,-1,8], 9, 0),
    ([3,9,7,9,10,9,4,9,99,-1,8], 7, 1),
    ([3,9,7,9,10,9,4,9,99,-1,8], 8, 0),
    ([3,9,7,9,10,9,4,9,99,-1,8], 9, 0),
    ([3,3,1108,-1,8,3,4,3,99], 7, 0),
    ([3,3,1108,-1,8,3,4,3,99], 8, 1),
    ([3,3,1108,-1,8,3,4,3,99], 9, 0),
    ([3,3,1107,-1,8,3,4,3,99], 7, 1),
    ([3,3,1107,-1,8,3,4,3,99], 8, 0),
    ([3,3,1107,-1,8,3,4,3,99], 9, 0),
    ([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], 0, 0),
    ([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], 99, 1),
    ([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], 0, 0),
    ([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], 99, 1),
    ([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], 7, 999),
    ([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], 8, 1000),
    ([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], 9, 1001),
])
def test_output(program, input, output):
    _, actual = execute_program(program, input)
    assert actual[0] == output


@pytest.mark.parametrize('code,instruction,modes', [
    (1002, 2, [0, 1, 0]),
    (11001, 1, [0, 1, 1]),
    (3, 3, [0, 0, 0]),
    (99, 99, [0, 0, 0])
])
def test_unpack_codes(code, instruction, modes):
    assert unpack_code(code) == (instruction, modes)
